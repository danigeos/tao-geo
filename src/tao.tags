!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AREA_TRIANGLE	../lib/libreria.c	/^#define AREA_TRIANGLE(/;"	d	file:
AT_BORDER	../include/types_n_defs.h	/^#define AT_BORDER(/;"	d
AT_BORDER_1D	../include/types_n_defs.h	/^#define AT_BORDER_1D(/;"	d
AUTHORSHIP	../include/types_n_defs.h	/^#define AUTHORSHIP	/;"	d
Add_Node_To_Lake	taosp.c	/^int Add_Node_To_Lake (int ncell, int i_lake)$/;"	f
Add_Saddle_To_Lake	taosp.c	/^int Add_Saddle_To_Lake (int sd, int tr, int i_lake)$/;"	f
Allocate_Memory	taolib.c	/^int Allocate_Memory()$/;"	f
Allocate_Memory_for_external_use	call_taosp.c	/^int Allocate_Memory_for_external_use()$/;"	f
Attempt_Delete_Node_From_Lake	taosp.c	/^int Attempt_Delete_Node_From_Lake (int ncell)$/;"	f
BLOCK	../include/types_n_defs.h	/^struct BLOCK { 		\/*for TISC*\/$/;"	s
BLOCK_1D	../include/types_n_defs.h	/^struct BLOCK_1D {	\/*for tAo*\/$/;"	s
BOOL	../include/types_n_defs.h	/^typedef enum BOOLEAN	{NO, YES} BOOL;$/;"	t	typeref:enum:BOOLEAN
BOOLEAN	../include/types_n_defs.h	/^typedef enum BOOLEAN	{NO, YES} BOOL;$/;"	g
BORDER_INDEX	../include/types_n_defs.h	/^#define BORDER_INDEX(/;"	d
BORDER_LIMIT	../include/types_n_defs.h	/^#define BORDER_LIMIT(/;"	d
Blocks	../include/tao.h	/^struct BLOCK_1D	*Blocks ; 	\/*Blocks array: Blocks[numBlocks] first Block is 0, last is numBlocks-1;*\/$/;"	v	typeref:struct:BLOCK_1D
Blocks_base	../include/tao.h	/^	*Blocks_base,			\/*Base of Blocks[0] (the lowest) measured from the current position of the original datum surface (now deflected by isostasy).*\/$/;"	v
CGU	../include/universal.h	/^	CGU	= 6.6732E-11, 			\/*Constant of Universal Gravitation [m3·s-2·kg-1]*\/$/;"	v
CS2D	../include/types_n_defs.h	/^struct CS2D {$/;"	s
CXrain	../include/tao+tisc.h	/^	CXrain, 		\/*[m3\/s\/m2], [m3\/s\/m2\/m], [m], [m]*\/$/;"	v
Calculate_Discharge	taosp.c	/^int Calculate_Discharge (int *sortcell)$/;"	f
Calculate_Precipitation_Evaporation	taosp.c	/^int Calculate_Precipitation_Evaporation ()$/;"	f
D	../include/tao.h	/^	*D, 				\/*Rigidity		[N m] *\/$/;"	v
DOMAIN_LIMIT	../include/types_n_defs.h	/^#define DOMAIN_LIMIT(/;"	d
DOMAIN_LIMIT_1D	../include/types_n_defs.h	/^#define DOMAIN_LIMIT_1D(/;"	d
DRAINAGE	../include/types_n_defs.h	/^struct DRAINAGE {$/;"	s
DRAINAGE_1D	../include/types_n_defs.h	/^struct DRAINAGE_1D {$/;"	s
Deallocate_Lake	taosp.c	/^int Deallocate_Lake (int i_lake)$/;"	f
Define_Drainage_Net	taosp.c	/^int Define_Drainage_Net (int *sortcell) $/;"	f
Define_Lake	taosp.c	/^int Define_Lake (int i_lake)$/;"	f
Delete_Block	taolib.c	/^int Delete_Block(int i_Block)$/;"	f
Delete_Node_From_Lake	taosp.c	/^int Delete_Node_From_Lake (int ln)$/;"	f
Diffusive_Eros_1D	taosp.c	/^int Diffusive_Eros_1D (float *topo, float Kerosdif, float dt, float dt_eros) $/;"	f
Direct_mode	tao.c	/^int Direct_mode(char *load_file_name)$/;"	f
Divide_Lake	taosp.c	/^int Divide_Lake (int ind) $/;"	f
Dq	../include/tao.h	/^	*Dq, 				\/*Load increment	[N\/m\/m] *\/$/;"	v
Dw	../include/tao.h	/^	*Dw, 				\/*Deflection increment	[m] *\/$/;"	v
E	../include/universal.h	/^	E	= 7E+10, 			\/*Young modulus [N\/m2]; Gerbault, 2000. At what stress level is the central Indian Ocean lithosphere buckling? EPSL, 178; Panteleyev, A. N.  & M. Diament, 2007. GJI 114-220. Influence of Some Rheological Parameters On Flexure of the Oceanic Lithosphere; Other authors use 1e11 (e.g., Minshull)*\/$/;"	v
ERODED_ERODIBILITY	taosp.c	/^#define ERODED_ERODIBILITY /;"	d	file:
ET2RIG	../include/geomodel.h	/^#define	ET2RIG(/;"	d
Elastoplastic_Deflection	tao.c	/^int Elastoplastic_Deflection()$/;"	f
Erode	taosp.c	/^int Erode (double d_mass, int ind) $/;"	f
Fluvial_Transport	taosp.c	/^int Fluvial_Transport (float *topo, float dt, float dt_fv, int erosed_model) $/;"	f
GAMMA	../include/types_n_defs.h	/^#define GAMMA	/;"	d
GAMMA_AIR	../include/types_n_defs.h	/^#define GAMMA_AIR	/;"	d
GAMMA_GROUND	../include/types_n_defs.h	/^#define GAMMA_GROUND	/;"	d
GET_KREST	../include/tao.h	/^#define GET_KREST(/;"	d
GRIDNODE	../include/types_n_defs.h	/^struct GRIDNODE {$/;"	s
IF_LAKE_IS_SEA	../include/types_n_defs.h	/^#define IF_LAKE_IS_SEA(/;"	d
INSIDE_BORDER	../include/types_n_defs.h	/^#define INSIDE_BORDER(/;"	d
IN_DOMAIN	../include/types_n_defs.h	/^#define IN_DOMAIN(/;"	d
IN_DOMAIN_1D	../include/types_n_defs.h	/^#define IN_DOMAIN_1D(/;"	d
Init_Stress	taolib.c	/^int Init_Stress()$/;"	f
K_river_cap	../include/tao+tisc.h	/^	K_river_cap, 		\/*Constant of river transport capacity [kg\/m3].*\/$/;"	v
Kerosdif	../include/tao+tisc.h	/^float	Kerosdif, 		\/*Diffusive erosion rate in m2\/Ma, (e. g. D. Waltham & S. Hardy*\/$/;"	v
Keroseol	../include/tao+tisc.h	/^	Keroseol, 		\/*Background erosion rate in m\/m\/Ma*\/$/;"	v
Krain	../include/tao+tisc.h	/^	rain, Krain, 		\/*[m3\/s\/m2], [m3\/s\/m2\/m] or m\/s*\/$/;"	v
Ksedim	../include/tao+tisc.h	/^	Ksedim, 		\/*Marine sedimentation rate in m\/Ma and its maximum water depth of validity*\/$/;"	v
LAKE_INFO	../include/types_n_defs.h	/^struct LAKE_INFO {		\/*For lakes*\/$/;"	s
LAKE_INFO_1D	../include/types_n_defs.h	/^struct LAKE_INFO_1D {		\/*For lakes*\/$/;"	s
LENGTHVERS	../include/universal.h	/^#define	LENGTHVERS	/;"	d
LES_matrix	taolib.c	/^int LES_matrix (double **A,	\/* Matrix of the lineal equation system. *\/$/;"	f
LIMIT	../include/types_n_defs.h	/^#define LIMIT(/;"	d
LININTERP	../include/types_n_defs.h	/^#define LININTERP(/;"	d
Lake	../include/tao.h	/^struct LAKE_INFO_1D *Lake;	\/*Lake[0] does not exist; Lake[1] is the sea or the first normal lake.*\/$/;"	v	typeref:struct:LAKE_INFO_1D
Lake_Fill	taosp.c	/^int Lake_Fill ($/;"	f
Lake_Input_Discharge	taosp.c	/^float Lake_Input_Discharge (int ilake) $/;"	f
Lake_Node_Number	taosp.c	/^int Lake_Node_Number(int ind)$/;"	f
Lake_Saddle_Number	taosp.c	/^int Lake_Saddle_Number (int ind)$/;"	f
Landslide_Transport	taosp.c	/^int Landslide_Transport (float critical_slope, float dt, float dt_eros)$/;"	f
MASS2SEDTHICK_1D	../include/tao.h	/^#define MASS2SEDTHICK_1D(/;"	d
MASS2SEDTHICK_1D	taosp.c	/^#define MASS2SEDTHICK_1D(/;"	d	file:
MAXETERR	../include/tao.h	/^#define	MAXETERR	/;"	d
MAXLENFILE	../include/types_n_defs.h	/^#define	MAXLENFILE	/;"	d
MAXLENLINE	../include/types_n_defs.h	/^#define	MAXLENLINE	/;"	d
MAXLONFICH	../include/types_n_defs.h	/^#define	MAXLONFICH	/;"	d
MAXLONLINE	../include/types_n_defs.h	/^#define	MAXLONLINE	/;"	d
MAXNUMLINEAS	invertfile.c	/^#define	MAXNUMLINEAS	/;"	d	file:
MAX_2	../include/types_n_defs.h	/^#define MAX_2(/;"	d
MAX_LENGTH_LINE	invertfile.c	/^#define	MAX_LENGTH_LINE	/;"	d	file:
MAX_Te_LOC_VAR	../include/tao.h	/^#define	MAX_Te_LOC_VAR	/;"	d
MIN_2	../include/types_n_defs.h	/^#define MIN_2(/;"	d
Match_Param_Replace_chr	../include/tao+tisc.h	/^#define Match_Param_Replace_chr(/;"	d
Match_Param_Replace_flt	../include/tao+tisc.h	/^#define Match_Param_Replace_flt(/;"	d
Match_Param_Replace_int	../include/tao+tisc.h	/^#define Match_Param_Replace_int(/;"	d
Match_Param_char	../include/tao+tisc.h	/^#define Match_Param_char(/;"	d
Match_Param_char	../lib/libreria.c	/^#define Match_Param_char(/;"	d	file:
Match_Param_char_old	../include/tao+tisc.h	/^#define Match_Param_char_old(/;"	d
Match_Param_flt	../include/tao+tisc.h	/^#define Match_Param_flt(/;"	d
Match_Param_flt	../lib/libreria.c	/^#define Match_Param_flt(/;"	d	file:
Match_Param_flt_old	../include/tao+tisc.h	/^#define Match_Param_flt_old(/;"	d
Match_Param_int	../include/tao+tisc.h	/^#define Match_Param_int(/;"	d
Match_Param_int	../lib/libreria.c	/^#define Match_Param_int(/;"	d	file:
Match_Param_int_old	../include/tao+tisc.h	/^#define Match_Param_int_old(/;"	d
Matosec	../include/types_n_defs.h	/^#define Matosec /;"	d
NEIGHBOURS	../include/types_n_defs.h	/^#define NEIGHBOURS(/;"	d
NMAXHEADERLINES	../include/tao+tisc.h	/^#define NMAXHEADERLINES	/;"	d
NMAXHEADERLINES	../lib/libreria.c	/^#define NMAXHEADERLINES /;"	d	file:
NMAXPOINTS	../lib/libreria.c	/^#define NMAXPOINTS /;"	d	file:
NMAXRHEOITERS	../include/tao.h	/^#define	NMAXRHEOITERS /;"	d
NO	../include/types_n_defs.h	/^typedef enum BOOLEAN	{NO, YES} BOOL;$/;"	e	enum:BOOLEAN
NOT_AT_BORDER	../include/types_n_defs.h	/^#define NOT_AT_BORDER(/;"	d
NOT_AT_BORDER_1D	../include/types_n_defs.h	/^#define NOT_AT_BORDER_1D(/;"	d
NOT_OUT_BORDER	../include/types_n_defs.h	/^#define NOT_OUT_BORDER(/;"	d
NO_DATA	../include/types_n_defs.h	/^#define NO_DATA	/;"	d
New_Lake	taosp.c	/^int New_Lake ()$/;"	f
NmaxBlocks	../include/tao.h	/^#define	NmaxBlocks	/;"	d
Nx	../include/universal.h	/^int	Nx, Ny, Nz,  				\/*Number of grid knots in x & z directions)*\/$/;"	v
Ny	../include/universal.h	/^int	Nx, Ny, Nz,  				\/*Number of grid knots in x & z directions)*\/$/;"	v
Nz	../include/universal.h	/^int	Nx, Ny, Nz,  				\/*Number of grid knots in x & z directions)*\/$/;"	v
OUT_BORDER	../include/types_n_defs.h	/^#define OUT_BORDER(/;"	d
OUT_DOMAIN	../include/types_n_defs.h	/^#define OUT_DOMAIN(/;"	d
OUT_DOMAIN_1D	../include/types_n_defs.h	/^#define OUT_DOMAIN_1D(/;"	d
Orographic_Precipitation	taosp.c	/^float Orographic_Precipitation (int i, float windvel)$/;"	f
Orographic_Precipitation_Evaporation_conservative	taosp.c	/^int Orographic_Precipitation_Evaporation_conservative (float *precip_aux, float *evaporation, float windvel)$/;"	f
PRINT_ARRAY_INFO	../include/tao.h	/^#define PRINT_ARRAY_INFO(/;"	d
PRINT_DEBUG	../include/types_n_defs.h	/^#define PRINT_DEBUG(/;"	d
PRINT_DEBUGPLUS	../include/types_n_defs.h	/^#define PRINT_DEBUGPLUS(/;"	d
PRINT_ERROR	../include/types_n_defs.h	/^#define PRINT_ERROR(/;"	d
PRINT_GRID_INFO	../include/types_n_defs.h	/^#define PRINT_GRID_INFO(/;"	d
PRINT_INFO	../include/types_n_defs.h	/^#define PRINT_INFO(/;"	d
PRINT_SUMLINE	../include/types_n_defs.h	/^#define PRINT_SUMLINE(/;"	d
PRINT_WARNING	../include/types_n_defs.h	/^#define PRINT_WARNING(/;"	d
RIG2ET	../include/geomodel.h	/^#define	RIG2ET(/;"	d
ReSort_Array	../lib/libreria.c	/^float ReSort_Array (float *array, int *orden, int Nx)$/;"	f
Read_Header_File	../include/tao+tisc.h	/^#define Read_Header_File(/;"	d
Read_Open_Filename_Return	../include/tao+tisc.h	/^#define Read_Open_Filename_Return(/;"	d
Read_Param	../include/tao.h	/^#define Read_Param(/;"	d
Rearth	../include/universal.h	/^	Rearth	= 6378e3 ;			\/*Earth's radius*\/$/;"	v
Repare_Blocks	taolib.c	/^int Repare_Blocks()$/;"	f
Rheo_Flex_Iter	taolib.c	/^int Rheo_Flex_Iter () {$/;"	f
SIGN	../include/types_n_defs.h	/^#define SIGN(/;"	d
SIGNAL	../include/types_n_defs.h	/^#define SIGNAL	/;"	d
SQUARE	../include/types_n_defs.h	/^#define SQUARE(/;"	d
SYNTAX	taofit.c	/^#define SYNTAX	/;"	d	file:
Sediment	taosp.c	/^int Sediment (double d_mass, int ind) $/;"	f
SolveAlmostDiagonalTriangularEquationSystem	../lib/libreria.c	/^int SolveAlmostDiagonalTriangularEquationSystem ($/;"	f
Surface_Transport	taosp.c	/^int Surface_Transport (float *topo, float dt, float dt_eros, int erosed_model) $/;"	f
TAKE_LINE_1	../include/types_n_defs.h	/^#define TAKE_LINE_1(/;"	d
TAKE_LINE_2	../include/types_n_defs.h	/^#define TAKE_LINE_2(/;"	d
TAKE_LINE_3	../include/types_n_defs.h	/^#define TAKE_LINE_3(/;"	d
TAKE_LINE_4	../include/types_n_defs.h	/^#define TAKE_LINE_4(/;"	d
TEMPERATURE	../include/types_n_defs.h	/^#define TEMPERATURE(/;"	d
TEMPERATURE_AIR	../include/types_n_defs.h	/^#define TEMPERATURE_AIR(/;"	d
TEMPERATURE_GROUND	../include/types_n_defs.h	/^#define TEMPERATURE_GROUND(/;"	d
TEMPERATURE_ICE	../include/types_n_defs.h	/^#define TEMPERATURE_ICE(/;"	d
TEMP_FREEZE_WATER	../include/types_n_defs.h	/^#define TEMP_FREEZE_WATER	/;"	d
THICK2SEDMASS_1D	../include/tao.h	/^#define THICK2SEDMASS_1D(/;"	d
THICK2SEDMASS_1D	taosp.c	/^#define THICK2SEDMASS_1D(/;"	d	file:
TRANSPORT_BOUNDARY_CONDITIONS	taosp.c	/^#define TRANSPORT_BOUNDARY_CONDITIONS /;"	d	file:
Te	../include/tao.h	/^	*Te,				\/*E.E.T. array*\/$/;"	v
Te_default	../include/geomodel.h	/^float	Te_default, 			\/*Default elastic plate thicknes [m]*\/$/;"	v
Temperature	../include/tao.h	/^	**Temperature, 			\/*[ºC]*\/$/;"	v
The_End	tao.c	/^int The_End()$/;"	f
Time	../include/geomodel.h	/^	Time=0, 			\/*Present Time of the model running [s]*\/$/;"	v
Timefinal	../include/geomodel.h	/^	Timeini=0, Timefinal=0,  	\/*Initial and final Times [s]*\/$/;"	v
Timeini	../include/geomodel.h	/^	Timeini=0, Timefinal=0,  	\/*Initial and final Times [s]*\/$/;"	v
TriangularizeAlmostDiagonalEquationSystem	../lib/libreria.c	/^int TriangularizeAlmostDiagonalEquationSystem($/;"	f
Unify_Lakes	taosp.c	/^int Unify_Lakes (int i_lake, int i_lake_to_delete)$/;"	f
VERTANOMCONTRIB	../lib/libreria.c	/^#define VERTANOMCONTRIB(/;"	d	file:
Viscous_Relaxation	tao.c	/^int Viscous_Relaxation()$/;"	f
WriteAlmostDiagonalMatrix	../lib/libreria.c	/^int WriteAlmostDiagonalMatrix (double **A, double *b, int rango, char *filename, int NDs, int NDi)$/;"	f
Write_Open_Filename_Return	../include/tao+tisc.h	/^#define Write_Open_Filename_Return(/;"	d
Write_Ouput	tao.c	/^int Write_Ouput()$/;"	f
YES	../include/types_n_defs.h	/^typedef enum BOOLEAN	{NO, YES} BOOL;$/;"	e	enum:BOOLEAN
age	../include/types_n_defs.h	/^	float	age;			\/*Age of initial file read*\/$/;"	m	struct:BLOCK_1D
age	../include/types_n_defs.h	/^	float	age;			\/*Age of initial file reading*\/$/;"	m	struct:BLOCK
alloc_array	../lib/libreria.c	/^float *alloc_array (int n)$/;"	f
alloc_array_dbl	../lib/libreria.c	/^double *alloc_array_dbl (int n)$/;"	f
alloc_matrix	../lib/libreria.c	/^float **alloc_matrix (int n_fil, int n_col)$/;"	f
alloc_matrix_dbl	../lib/libreria.c	/^double **alloc_matrix_dbl (int n_fil, int n_col)$/;"	f
alloc_matrix_int	../lib/libreria.c	/^int **alloc_matrix_int (int n_fil, int n_col)$/;"	f
alt	../include/types_n_defs.h	/^	float alt;		\/*Altitude of the lake water level*\/$/;"	m	struct:LAKE_INFO
alt	../include/types_n_defs.h	/^	float alt;		\/*Altitude of the lake water level*\/$/;"	m	struct:LAKE_INFO_1D
anombloq	../lib/libreria.c	/^float anombloq(register float x1, register float x2, float z1, float z2, float contrdens)$/;"	f
appmoment	../include/tao.h	/^	horz_force, vert_force, appmoment; 	\/*Horizontal tectonic force and Vertical boundary applied force (in N\/m); Boundary applied moment (in N m\/m)*\/$/;"	v
boundary_conds	../include/tao.h	/^	boundary_conds,$/;"	v
calculate_sea_level	taolib.c	/^float calculate_sea_level()$/;"	f
calculate_topo	taolib.c	/^float calculate_topo(float *topo_new)$/;"	f
call_surf_proc_	call_taosp.c	/^int call_surf_proc_ ($/;"	f
cell	../include/types_n_defs.h	/^	int *cell;$/;"	m	struct:LAKE_INFO_1D
col	../include/types_n_defs.h	/^	int *col;$/;"	m	struct:LAKE_INFO
col	../include/types_n_defs.h	/^	int col;$/;"	m	struct:GRIDNODE
col_sd	../include/types_n_defs.h	/^	int *col_sd;$/;"	m	struct:LAKE_INFO
constant_rate_eros	taosp.c	/^int constant_rate_eros ($/;"	f
critical_slope	../include/tao+tisc.h	/^	critical_slope, 	\/*for landsliding*\/$/;"	v
crust_thick	../include/tao.h	/^float	*crust_thick,			\/*Crust thickness array*\/$/;"	v
crust_thick_default	../include/geomodel.h	/^	crust_thick_default, 		\/*Default thickness for crust [m]*\/$/;"	v
deform_sed	../include/tao+tisc.h	/^	deform_sed;			\/*YES to deform sediment automatically, based on Blocks motion*\/$/;"	v
densasthen	../include/geomodel.h	/^	densasthen, 			\/*Mantle density [kg\/m3]*\/$/;"	v
denscrust	../include/geomodel.h	/^	denscrust, 			\/*Crust density [kg\/m3]*\/$/;"	v
densenv	../include/geomodel.h	/^	densenv, 			\/*Density of medium over the plate (usually air ==> zero) [kg\/m3]*\/$/;"	v
densice	../include/universal.h	/^	densice = 920, 				\/*Ice density*\/$/;"	v
densinfill	../include/geomodel.h	/^	densinfill, 			\/*Density of infilling (under the zero deflection level) material when avistopoest=SI [kg\/m3]*\/$/;"	v
density	../include/types_n_defs.h	/^	float	density;		\/*Density*\/$/;"	m	struct:BLOCK
density	../include/types_n_defs.h	/^	float	density;		\/*Density*\/$/;"	m	struct:BLOCK_1D
densmantle	../include/geomodel.h	/^	densmantle, 			\/*Mantle density [kg\/m3]*\/$/;"	v
denssedim	../include/geomodel.h	/^	denssedim, 			\/*Sediment density [kg\/m3]*\/		$/;"	v
denswater	../include/universal.h	/^	denswater = 1020, 			\/*Water density*\/$/;"	v
detr_grsize	../include/types_n_defs.h	/^	float	**detr_grsize;		\/*Only used for sediment Blocks: grain size of the detrital sediment*\/$/;"	m	struct:BLOCK
detr_grsize	../include/types_n_defs.h	/^	float	*detr_grsize;		\/*Only used for sediment Blocks: grain size of the detrital sediment*\/$/;"	m	struct:BLOCK_1D
detr_ratio	../include/types_n_defs.h	/^	float	**detr_ratio;		\/*Only used for sediment Blocks: % of detrital sediment (non carbonatic)*\/$/;"	m	struct:BLOCK
detr_ratio	../include/types_n_defs.h	/^	float	*detr_ratio;		\/*Only used for sediment Blocks: % of detrital sediment (non carbonatic)*\/$/;"	m	struct:BLOCK_1D
diffusion_2D	../lib/libreria.c	/^int diffusion_2D(float **Matrix, float **d_Matrix, int Nx, int Ny, float Kdiff, float dx, float dy, float dteros)$/;"	f
discharge	../include/types_n_defs.h	/^	float discharge;	\/*water flow through the node [m3\/s]*\/$/;"	m	struct:DRAINAGE
discharge	../include/types_n_defs.h	/^	float discharge;	\/*water flow through the node [m3\/s]*\/$/;"	m	struct:DRAINAGE_1D
distVincenty	../lib/libreria.c	/^float distVincenty(float lat1, float lon1, float lat2, float lon2) {$/;"	f
dist_2D	../lib/libreria.c	/^float dist_2D($/;"	f
dist_xy_line	../lib/libreria.c	/^float dist_xy_line($/;"	f
dist_xy_pol	../lib/libreria.c	/^float dist_xy_pol($/;"	f
dist_xy_segment	../lib/libreria.c	/^float dist_xy_segment($/;"	f
dr	../include/types_n_defs.h	/^	int dr;		\/*row of the node to where drains*\/$/;"	m	struct:DRAINAGE_1D
dr_col	../include/types_n_defs.h	/^	int dr_col;		\/*column of the node to where drains*\/$/;"	m	struct:DRAINAGE
dr_row	../include/types_n_defs.h	/^	int dr_row;		\/*row of the node to where drains*\/$/;"	m	struct:DRAINAGE
drainage	../include/tao.h	/^struct DRAINAGE_1D  *drainage;$/;"	v	typeref:struct:DRAINAGE_1D
dt	../include/geomodel.h	/^	dt=0, 				\/*Time increment [s]*\/$/;"	v
dt_eros	../include/geomodel.h	/^	dt_eros, 			\/*Approximate dt for surface processes.*\/$/;"	v
dt_record	../include/tao+tisc.h	/^	dt_record, 			\/*maximum Time interval between automatically-generated sediment Blocks [s]*\/$/;"	v
dx	../include/universal.h	/^float	dx, dy, dz, dxy;			\/*Horizontal & vertical grid intervals [m]*\/$/;"	v
dxy	../include/universal.h	/^float	dx, dy, dz, dxy;			\/*Horizontal & vertical grid intervals [m]*\/$/;"	v
dy	../include/universal.h	/^float	dx, dy, dz, dxy;			\/*Horizontal & vertical grid intervals [m]*\/$/;"	v
dz	../include/universal.h	/^float	dx, dy, dz, dxy;			\/*Horizontal & vertical grid intervals [m]*\/$/;"	v
erodibility	../include/tao+tisc.h	/^	erodibility, 		$/;"	v
erodibility	../include/types_n_defs.h	/^	float	erodibility;		\/*erosion parameter*\/$/;"	m	struct:BLOCK
erodibility	../include/types_n_defs.h	/^	float	erodibility;		\/*erosion parameter*\/$/;"	m	struct:BLOCK_1D
erodibility_sed	../include/tao+tisc.h	/^	erodibility_sed, 	$/;"	v
eros_bound_cond	../include/tao.h	/^char	eros_bound_cond[2];$/;"	v
eros_now	../include/tao.h	/^	*eros_now,$/;"	v
erosed_model	../include/tao.h	/^int	erosed_model, $/;"	v
evaluate_xy_points	../lib/libreria.c	/^float evaluate_xy_points($/;"	f
evaporation	../include/tao.h	/^	*evaporation,$/;"	v
evaporation_ct	../include/tao.h	/^float 	evaporation_ct, 		\/*[m3\/s\/m2].*\/$/;"	v
flexural_stats	tao.c	/^int flexural_stats (float *moment) {$/;"	f
free_matrix	../lib/libreria.c	/^int free_matrix (float **matrix, int n_fil)$/;"	f
free_matrix_dbl	../lib/libreria.c	/^int free_matrix_dbl (double **matrix, int n_fil)$/;"	f
free_matrix_int	../lib/libreria.c	/^int free_matrix_int (int **matrix, int n_fil)$/;"	f
g	../include/universal.h	/^	g	= 9.81, 			\/*Earth's surface average gravity acceleration [m·s-2]*\/$/;"	v
geoidanompolyg	../lib/libreria.c	/^float geoidanompolyg($/;"	f
gif_geom	../include/tao.h	/^char 	gif_geom[MAXLENLINE];$/;"	v
gradual_Block	taolib.c	/^int gradual_Block()$/;"	f
grainsize	../include/types_n_defs.h	/^	float grainsize;	\/*average grain size of the sedload[m]*\/$/;"	m	struct:DRAINAGE
grainsize	../include/types_n_defs.h	/^	float grainsize;	\/*average grain size of the sedload[m]*\/$/;"	m	struct:DRAINAGE_1D
grav_anom_type	../include/geomodel.h	/^int	grav_anom_type, 		\/*Gravity anomaly type [m]: 0 means no gravity calculation; 1 means Bouguer; 2 means free-Air*\/$/;"	v
gravanompolyg	../lib/libreria.c	/^float gravanompolyg($/;"	f
gravity_anomaly	tao.c	/^int gravity_anomaly()$/;"	f
h_last_unit	../include/tao.h	/^	*h_last_unit,		 	\/*Height at last unit file [m] *\/$/;"	v
h_water	../include/tao.h	/^	*h_water, 				\/*Water load thickness	[m] *\/$/;"	v
horiz	../include/types_n_defs.h	/^	float *horiz;$/;"	m	struct:CS2D
horiz_record_time	../include/tao+tisc.h	/^	*horiz_record_time;		\/*Array with times in wich to record horizons*\/$/;"	v
horz_force	../include/tao.h	/^	horz_force, vert_force, appmoment; 	\/*Horizontal tectonic force and Vertical boundary applied force (in N\/m); Boundary applied moment (in N m\/m)*\/$/;"	v
hydro_model	../include/tao.h	/^	hydro_model, $/;"	v
i_Block_insert	../include/tao+tisc.h	/^	i_Block_insert, 			\/*Number of the Block in wich will be inserted the heigh of the next load*\/$/;"	v
i_first_Block_load	../include/tao+tisc.h	/^	i_first_Block_load, 		\/*Number of the first Block corresponding to a load*\/$/;"	v
imomentmax	../include/tao.h	/^int 	imomentmax, $/;"	v
init_surf_proc_	call_taosp.c	/^int init_surf_proc_ ($/;"	f
inputs	tao.c	/^int inputs(int argc, char **argv)$/;"	f
insert_new_Block	taolib.c	/^int insert_new_Block(int num_new_Block)$/;"	f
interpol2D	../lib/libreria.c	/^int interpol2D ($/;"	f
interpol_in_xy_data	../lib/libreria.c	/^float interpol_in_xy_data ($/;"	f
interpol_point_in_mesh	../lib/libreria.c	/^float interpol_point_in_mesh ($/;"	f
interpr_command_line_opts	tao.c	/^int interpr_command_line_opts(int argc, char **argv) $/;"	f
isost_model	../include/geomodel.h	/^	isost_model;			\/*Type of isostasy \/ lithospheric plate: $/;"	v
l	../include/types_n_defs.h	/^	float l;$/;"	m	struct:CS2D
l_fluv_sedim	../include/tao+tisc.h	/^	l_fluv_sedim, 		\/*Length scale of fluvial sedimentation *\/$/;"	v
lake	../include/types_n_defs.h	/^	int lake;		\/*number of the lake: > 0 means is well defined; < 0 means is not still defined; 0 means it is not a lake*\/$/;"	m	struct:DRAINAGE
lake	../include/types_n_defs.h	/^	int lake;		\/*number of the lake: > 0 means is well defined; < 0 means is not still defined; 0 means it is not a lake*\/$/;"	m	struct:DRAINAGE_1D
last_shift	../include/types_n_defs.h	/^	float	last_shift;		\/*Espected shift (not affected by finite differences discretization)*\/$/;"	m	struct:BLOCK_1D
last_shift_x	../include/types_n_defs.h	/^	float	last_shift_x;		\/*Previous x shift of Block*\/$/;"	m	struct:BLOCK
last_shift_y	../include/types_n_defs.h	/^	float	last_shift_y;		\/*Previous y shift of Block*\/$/;"	m	struct:BLOCK
last_time_file_time	../include/tao+tisc.h	/^	last_time_file_time, $/;"	v
last_vel_time	../include/types_n_defs.h	/^	float	last_vel_time; 		\/*Last time in which velocity changed*\/$/;"	m	struct:BLOCK
last_vel_time	../include/types_n_defs.h	/^	float	last_vel_time; 		\/*Last time in which velocity changed*\/$/;"	m	struct:BLOCK_1D
lost_rate	../include/tao+tisc.h	/^	lost_rate, 		\/*Percent of lost water per unit length *\/$/;"	v
main	invertfile.c	/^int main (int argc, char **argv)$/;"	f
main	tao.c	/^int main(int argc, char **argv)$/;"	f
main	taofit.c	/^int main(int argc, char **argv)$/;"	f
make_gravi_body	taolib.c	/^int make_gravi_body(float *upper_hor, float *lower_hor, float *body_x, float *body_z)$/;"	f
masstr	../include/types_n_defs.h	/^	float masstr;		\/*sediment load: mass exiting the cell [kg\/s]*\/$/;"	m	struct:DRAINAGE
masstr	../include/types_n_defs.h	/^	float masstr;		\/*sediment load: mass exiting the cell [kg\/s]*\/$/;"	m	struct:DRAINAGE_1D
match_parameter	taolib.c	/^int match_parameter(char *str1, char *str2, int show, int replace, char *line)$/;"	f
mode_interp	../include/tao.h	/^	mode_interp, 		$/;"	v
moment_calculator	taolib.c	/^float moment_calculator (float 	d2wdx2, $/;"	f
moment_calculator_hist	taolib.c	/^float moment_calculator_hist ($/;"	f
move_Blocks	tao.c	/^int move_Blocks()$/;"	f
n	../include/types_n_defs.h	/^	int n;			\/*number of nodes INCLUDING SADDLES*\/$/;"	m	struct:LAKE_INFO
n	../include/types_n_defs.h	/^	int n;			\/*number of nodes including saddles*\/$/;"	m	struct:LAKE_INFO_1D
n_eros_level_input_points	../include/tao+tisc.h	/^	n_eros_level_input_points, 	\/*Number of input points of erosion level*\/$/;"	v
n_image	../include/tao.h	/^	n_image;$/;"	v
n_record_times	../include/tao+tisc.h	/^	n_record_times, 		\/*Number of horizons to record*\/$/;"	v
n_sd	../include/types_n_defs.h	/^	int n_sd;		\/*number of saddles and transferring nodes*\/$/;"	m	struct:LAKE_INFO
n_sd	../include/types_n_defs.h	/^	int n_sd;		\/*number of saddles and transferring nodes*\/$/;"	m	struct:LAKE_INFO_1D
n_sea_level_input_points	../include/tao+tisc.h	/^	n_sea_level_input_points,	\/*Number of sea level input points*\/$/;"	v
nbasins	../include/tao.h	/^	nbasins, $/;"	v
nlakes	../include/tao.h	/^	nlakes, 		\/*number of lakes >= 0 *\/$/;"	v
nloads	../include/tao+tisc.h	/^int	nloads, 			\/*Number of loads done*\/$/;"	v
nmax_input_points	../include/tao.h	/^	nmax_input_points,	\/*Maximum number of input points in moving loads*\/$/;"	v
nu	../include/universal.h	/^	nu	= .25, 				\/*Poisson coefficient*\/$/;"	v
numBlocks	../include/tao+tisc.h	/^	numBlocks, 			\/*Number of recorded Blocks*\/$/;"	v
number_e	../include/universal.h	/^	number_e = 2.7182818, 			\/*Number e*\/$/;"	v
nwrotenfiles	../include/tao+tisc.h	/^	nwrotenfiles, 			\/*Number of wroten output files*\/$/;"	v
nx_temp_input	../include/tao.h	/^	nx_temp_input;		\/*Number of x points with defined geotherm in .TMP file*\/$/;"	v
outin	../lib/libreria.c	/^int outin($/;"	f
pi	../include/universal.h	/^	pi	= 3.14159265, 			\/*PI number*\/$/;"	v
polygon_area	../lib/libreria.c	/^float polygon_area($/;"	f
precipitation	../include/tao.h	/^	*precipitation,$/;"	v
prism_vertical_atraction	../lib/libreria.c	/^double prism_vertical_atraction ($/;"	f
project_xy_line	../lib/libreria.c	/^float project_xy_line($/;"	f
project_xy_segment	../lib/libreria.c	/^float project_xy_segment($/;"	f
projectname	../include/geomodel.h	/^char	projectname[MAXLONFICH], 	\/*The project name is also the root of current model file names*\/$/;"	v
q	../include/tao.h	/^	*q, 				\/*load 			[N\/m\/m] *\/$/;"	v
rain	../include/tao+tisc.h	/^	rain, Krain, 		\/*[m3\/s\/m2], [m3\/s\/m2\/m] or m\/s*\/$/;"	v
random_topo	../include/tao+tisc.h	/^	random_topo=0, 			\/*Maximum random variation of initial topo*\/$/;"	v
read_file_Crust_Thick	taoio.c	/^int read_file_Crust_Thick(float crust_thick_default)$/;"	f
read_file_Te	taoio.c	/^int read_file_Te()$/;"	f
read_file_Temperature	taoio.c	/^int read_file_Temperature()$/;"	f
read_file_Upper_Crust_Thick	taoio.c	/^int read_file_Upper_Crust_Thick(float crust_thick_supdefault)$/;"	f
read_file_YSE	taolib.c	/^int read_file_YSE()$/;"	f
read_file_horiz_record_time	taoio.c	/^int read_file_horiz_record_time()$/;"	f
read_file_initial_deflection	taoio.c	/^int read_file_initial_deflection(float *w)$/;"	f
read_file_initial_topo	taoio.c	/^int read_file_initial_topo(float *h)$/;"	f
read_file_parameters	taoio.c	/^int read_file_parameters (int show, int reformat) $/;"	f
read_file_resume	taoio.c	/^int read_file_resume(char *filename)$/;"	f
read_file_sea_level	taoio.c	/^int read_file_sea_level()$/;"	f
read_file_unit	tao.c	/^int read_file_unit()$/;"	f
readinterp2D	../lib/libreria.c	/^int readinterp2D ($/;"	f
readinterplin	../lib/libreria.c	/^int readinterplin ($/;"	f
relative_humidity	../include/tao+tisc.h	/^	relative_humidity, 	\/*Relative humidity at the upwind boundary (incoming air rel. humidity) [no units]*\/$/;"	v
replace_word	../lib/libreria.c	/^char *replace_word(char *s, char *old, char *new)$/;"	f
riverbasinwidth	../include/tao.h	/^	riverbasinwidth, 		\/*[m]*\/$/;"	v
row	../include/types_n_defs.h	/^	int *row;$/;"	m	struct:LAKE_INFO
row	../include/types_n_defs.h	/^	int row;$/;"	m	struct:GRIDNODE
row_sd	../include/types_n_defs.h	/^	int *row_sd;$/;"	m	struct:LAKE_INFO
run_type	../include/tao+tisc.h	/^	run_type; 			\/*tao execution mode*\/$/;"	v
sd	../include/types_n_defs.h	/^	int *sd;$/;"	m	struct:LAKE_INFO_1D
sea_level	../include/geomodel.h	/^	sea_level=0, 			\/*Sea level height with respect to the model zero level [m]*\/$/;"	v
secsperMa	../include/types_n_defs.h	/^#define secsperMa /;"	d
secsperyr	../include/types_n_defs.h	/^#define secsperyr /;"	d
sed_porosity	../include/tao+tisc.h	/^	sed_porosity, $/;"	v
shift	../include/types_n_defs.h	/^	float	shift;			\/*Total horizontal shift of Block*\/$/;"	m	struct:BLOCK_1D
shift_x	../include/types_n_defs.h	/^	float	shift_x;		\/*Total x shift of Block*\/$/;"	m	struct:BLOCK
shift_y	../include/types_n_defs.h	/^	float	shift_y;		\/*Total y shift of Block*\/$/;"	m	struct:BLOCK
sistecslintriang	../lib/libreria.c	/^void sistecslintriang(float **a, float *b, int nx, float *x)$/;"	f
solveLES	taolib.c	/^int solveLES (double **A, double *b, int Nx, int nds, int ndi, float *x)$/;"	f
sortcell	../include/tao.h	/^int *sortcell;$/;"	v
spl_m	../include/tao+tisc.h	/^	spl_m, spl_n, 		\/*exponents of the stream power law over Q and S; m\/n is ca. 0.5*\/$/;"	v
spl_n	../include/tao+tisc.h	/^	spl_m, spl_n, 		\/*exponents of the stream power law over Q and S; m\/n is ca. 0.5*\/$/;"	v
sqrt2	../include/universal.h	/^	sqrt2	= 1.4142136, 			\/*Square root of 2*\/$/;"	v
stress	../include/tao.h	/^	**stress, 			\/*[Pa]*\/$/;"	v
surface_processes	tao.c	/^int surface_processes()$/;"	f
surface_topo	../lib/libreria.c	/^double surface_topo($/;"	f
switch_YSE_file	../include/tao.h	/^	switch_YSE_file=NO;			\/*SI if yield stress is given directly from a .YSE file*\/$/;"	v
switch_dt_output	../include/tao+tisc.h	/^BOOL	switch_dt_output=NO, $/;"	v
switch_file_out	../include/tao+tisc.h	/^	switch_file_out=NO, $/;"	v
switch_geograph_coor	../include/geomodel.h	/^	switch_geograph_coor;		\/*SI if x-y are geographycal coordinates*\/$/;"	v
switch_geograph_coor	../include/universal.h	/^BOOL	switch_geograph_coor,			\/*1 if x-y are geographycal coordinates in decimal degrees*\/$/;"	v
switch_gradual	../include/tao+tisc.h	/^	switch_gradual, 		\/*YES to distribute the load between the Time of reading file and the Time of the following one*\/$/;"	v
switch_insert_load	../include/tao.h	/^BOOL	switch_insert_load=NO,		\/*Si to insert the load height beneath the first load Block*\/$/;"	v
switch_ps	../include/universal.h	/^	switch_ps, 				\/*SI if postscript file will have to be wroten*\/$/;"	v
switch_sea	../include/geomodel.h	/^BOOL	switch_sea, 			\/*SI if sea presence has been required*\/$/;"	v
switch_strs_history	../include/tao.h	/^	switch_strs_history, $/;"	v
switch_topoest	../include/tao+tisc.h	/^	switch_topoest, 		\/*YES if load files give topographic loads which must stay at zero level while the deflection room is filled up with 'densinfill' density material*\/$/;"	v
switch_write_file	../include/universal.h	/^	switch_write_file;			\/*SI if results file must be wroten*\/$/;"	v
switch_write_file_Blocks	../include/tao+tisc.h	/^	switch_write_file_Blocks, 	\/*YES if Blocks (profile *.pfl) file is to be written*\/$/;"	v
syntax	tao.c	/^int syntax()$/;"	f
tau	../include/geomodel.h	/^	tau ;				\/*Viscoelastic relaxation Time [s]*\/$/;"	v
tectload	tao.c	/^int tectload()$/;"	f
temp_sea_level	../include/geomodel.h	/^	temp_sea_level, 		\/*temperature at se level [C]*\/$/;"	v
thick	../include/types_n_defs.h	/^	float	**thick;		\/*Present thickness at each x point*\/$/;"	m	struct:BLOCK
thick	../include/types_n_defs.h	/^	float	*thick;			\/*Present thickness at each x point*\/$/;"	m	struct:BLOCK_1D
time_stop	../include/types_n_defs.h	/^	float	time_stop;		\/*Time in wich Block will stop*\/$/;"	m	struct:BLOCK_1D
time_stop	../include/types_n_defs.h	/^	float	time_stop;		\/*Time to stop*\/$/;"	m	struct:BLOCK
title	../include/geomodel.h	/^	title[MAXLONLINE];		\/*Title with main current model characteristics*\/$/;"	v
topo	../include/tao.h	/^	*topo,  			\/*Topography over sea level*\/$/;"	v
total_bedrock_eros_mass	../include/tao+tisc.h	/^	total_bedrock_eros_mass,$/;"	v
total_erosion	../include/tao.h	/^	*total_erosion, 		\/*Cumulated erosion at each point*\/$/;"	v
total_evap_water	../include/tao.h	/^	total_evap_water,$/;"	v
total_lost_water	../include/tao.h	/^	total_lost_water,$/;"	v
total_rain	../include/tao.h	/^	total_rain, $/;"	v
total_sed_mass	../include/tao+tisc.h	/^	total_sed_mass; $/;"	v
triangularizar	../lib/libreria.c	/^int triangularizar(float **a, float *b, int nx)$/;"	f
type	../include/types_n_defs.h	/^	char 	type;			\/*'T' means thin_sheet*\/$/;"	m	struct:BLOCK
type	../include/types_n_defs.h	/^	char 	type;			\/*'T' means thin_sheet*\/$/;"	m	struct:BLOCK_1D
type	../include/types_n_defs.h	/^	char type;		\/*type (lake, river, sea, etc)*\/$/;"	m	struct:DRAINAGE
type	../include/types_n_defs.h	/^	char type;		\/*type (lake, river, sea, etc)*\/$/;"	m	struct:DRAINAGE_1D
upper_crust_thick	../include/tao.h	/^	*upper_crust_thick,		\/*Upper crust thickness array*\/$/;"	v
upper_crust_thick_default	../include/geomodel.h	/^	upper_crust_thick_default,	\/*Default thickness for upper crust [m]*\/$/;"	v
var_eros_level	../include/tao+tisc.h	/^	**var_eros_level, 		\/*Variations of the erosion level (height dividing erosion and sedimentation, measured from sea_level)*\/$/;"	v
var_sea_level	../include/tao+tisc.h	/^	**var_sea_level, 		\/*Array nx2 with sea level along time*\/$/;"	v
vel	../include/types_n_defs.h	/^	float	vel;			\/*Velocity at wich Block moves*\/$/;"	m	struct:BLOCK_1D
vel_x	../include/types_n_defs.h	/^	float	**vel_x;		\/*Velocity in x direction*\/$/;"	m	struct:BLOCK
vel_y	../include/types_n_defs.h	/^	float	**vel_y;		\/*Velocity in y direction*\/$/;"	m	struct:BLOCK
verbose_level	../include/universal.h	/^	verbose_level;$/;"	v
version	../include/universal.h	/^char	version[LENGTHVERS], 			\/*Version of the program*\/$/;"	v
version_input	../include/universal.h	/^	version_input[LENGTHVERS];		\/*Version actually found in input files*\/$/;"	v
vert_force	../include/tao.h	/^	horz_force, vert_force, appmoment; 	\/*Horizontal tectonic force and Vertical boundary applied force (in N\/m); Boundary applied moment (in N m\/m)*\/$/;"	v
visc	../include/types_n_defs.h	/^	float	**visc;			\/*Viscosity (only for thin sheet calculations)*\/$/;"	m	struct:BLOCK
viscTer	../include/types_n_defs.h	/^	float	**viscTer;		\/*Viscosity thermal term (only used for thin sheet calculations, in the first step)*\/$/;"	m	struct:BLOCK
vol	../include/types_n_defs.h	/^	float vol;		\/*Volume of the lake water body*\/$/;"	m	struct:LAKE_INFO
vol	../include/types_n_defs.h	/^	float vol;		\/*Volume of the lake water body*\/$/;"	m	struct:LAKE_INFO_1D
w	../include/tao.h	/^	*w, 				\/*Deflection		[m] *\/$/;"	v
water_load	taolib.c	/^int water_load()$/;"	f
write_file_Blocks	taoio.c	/^int write_file_Blocks()$/;"	f
write_file_Te	taoio.c	/^int write_file_Te () $/;"	f
write_file_Temperature	taoio.c	/^int write_file_Temperature ()$/;"	f
write_file_Temperature_initial	taoio.c	/^int write_file_Temperature_initial ()$/;"	f
write_file_erosed	taoio.c	/^int write_file_erosed (float *total_erosion)$/;"	f
write_file_grav_anom	taoio.c	/^int write_file_grav_anom (float *gravanom, float *geoidanom)$/;"	f
write_file_maxmompoint	taoio.c	/^int write_file_maxmompoint ()$/;"	f
write_file_resume	taoio.c	/^int write_file_resume()$/;"	f
write_file_stress	taoio.c	/^int write_file_stress ()$/;"	f
write_file_time	taoio.c	/^int write_file_time (float *w, float *topo)$/;"	f
x	../include/types_n_defs.h	/^	float x;$/;"	m	struct:CS2D
x0	../include/tao.h	/^	x0, xf, 			\/*X horizontal direction logical limits of the model [m]*\/$/;"	v
xf	../include/tao.h	/^	x0, xf, 			\/*X horizontal direction logical limits of the model [m]*\/$/;"	v
xmax	../include/tao.h	/^	xmin, xmax, zmin, zmax, 	\/*Screen limits for the graphic output [m]*\/$/;"	v
xmin	../include/tao.h	/^	xmin, xmax, zmin, zmax, 	\/*Screen limits for the graphic output [m]*\/$/;"	v
y	../include/types_n_defs.h	/^	float y;$/;"	m	struct:CS2D
yield_stress_envelope	taolib.c	/^int yield_stress_envelope ($/;"	f
yield_stress_envelope_semibrittle	taolib.c	/^int yield_stress_envelope_semibrittle ($/;"	f
yieldcompres	../include/tao.h	/^	*yieldcompres,			\/*yield stress envelope -- compresive  [Pa]*\/$/;"	v
yieldextens	../include/tao.h	/^	*yieldextens;			\/*yield stress envelope -- extensive  [Pa]*\/$/;"	v
zini	../include/tao+tisc.h	/^float	zini, 				\/*altitude of the initial plate position over the sea level [m]*\/$/;"	v
zmax	../include/tao.h	/^	xmin, xmax, zmin, zmax, 	\/*Screen limits for the graphic output [m]*\/$/;"	v
zmin	../include/tao.h	/^	xmin, xmax, zmin, zmax, 	\/*Screen limits for the graphic output [m]*\/$/;"	v
